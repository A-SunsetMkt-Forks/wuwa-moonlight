#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Jianxin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TsBaseCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Jianxin.BP_Jianxin_C
// 0x0020 (0x07A0 - 0x0780)
class ABP_Jianxin_C final : public ATsBaseCharacter_C
{
public:
	uint8                                         Pad_1434[0x7];                                     // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Jianxin_C;                       // 0x0778(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 OtherCase1;                                        // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponCase1;                                       // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponCase0;                                       // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Jianxin(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void FightCommand(bool IsInAir);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Jianxin_C">();
	}
	static class ABP_Jianxin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Jianxin_C>();
	}
};
static_assert(alignof(ABP_Jianxin_C) == 0x000010, "Wrong alignment on ABP_Jianxin_C");
static_assert(sizeof(ABP_Jianxin_C) == 0x0007A0, "Wrong size on ABP_Jianxin_C");
static_assert(offsetof(ABP_Jianxin_C, UberGraphFrame_BP_Jianxin_C) == 0x000778, "Member 'ABP_Jianxin_C::UberGraphFrame_BP_Jianxin_C' has a wrong offset!");
static_assert(offsetof(ABP_Jianxin_C, OtherCase1) == 0x000780, "Member 'ABP_Jianxin_C::OtherCase1' has a wrong offset!");
static_assert(offsetof(ABP_Jianxin_C, WeaponCase1) == 0x000788, "Member 'ABP_Jianxin_C::WeaponCase1' has a wrong offset!");
static_assert(offsetof(ABP_Jianxin_C, WeaponCase0) == 0x000790, "Member 'ABP_Jianxin_C::WeaponCase0' has a wrong offset!");

}

