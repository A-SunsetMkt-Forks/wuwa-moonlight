#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalGI_LaunchScene

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalGI_LaunchScene.BP_GlobalGI_LaunchScene_C
// 0x0320 (0x2260 - 0x1F40)
class ABP_GlobalGI_LaunchScene_C final : public AKuroGlobalGI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1F40(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS6;                                  // 0x1F48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS5;                                  // 0x1F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS4;                                  // 0x1F58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS3;                                  // 0x1F60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS2;                                  // 0x1F68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS1;                                  // 0x1F70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS;                                   // 0x1F78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              LUTPostProcess;                                    // 0x1F80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Aurora;                                         // 0x1F88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Stars;                                          // 0x1F90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skybox;                                            // 0x1F98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              GlobalUiKuroPostProcess;                           // 0x1FA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  GlobalPostProcessVolume;                           // 0x1FA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             SceneLight;                                        // 0x1FB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoMoonLight;                                     // 0x1FB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoSunLight;                                      // 0x1FC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x1FC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x1FD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x1FD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLightHorizontal;                          // 0x1FE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrTimeOfDay;                                     // 0x1FE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x1FE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTODCycle;                                    // 0x1FEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PauseTOD;                                          // 0x1FED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          __h___;                                            // 0x1FEE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27DC[0x1];                                     // 0x1FEF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TODCycleTime;                                      // 0x1FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AtmosphereSunRot;                                  // 0x1FF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               SenenDirLightRot;                                  // 0x2000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BP_SunHorizonAngle;                                // 0x200C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BP_SunVerticalAngle;                               // 0x2010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightHorizonAngle;                             // 0x2014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightVerticalAngle;                            // 0x2018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightAngleLimit;                               // 0x201C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGIEnable;                                        // 0x2020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ____________;                                      // 0x2021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27DD[0x2];                                     // 0x2022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SM_______;                                         // 0x2024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Star3_r;                                           // 0x2028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      SunLightExistTime;                                 // 0x2038(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      MoonLightExistTime;                                // 0x2048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          _L_______;                                         // 0x2058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UISceneRendering;                                  // 0x2059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27DE[0x6];                                     // 0x205A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPDA_GIUIData_C*                        UIData;                                            // 0x2060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_UI;                                          // 0x2068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsRootGI;                                          // 0x2069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEditorUpdate;                                    // 0x206A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ___rI__;                                           // 0x206B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NinenI________rI__;                                // 0x206C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG____r____I;                                   // 0x206D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27DF[0x2];                                     // 0x206E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DEBUG__r____I__;                                   // 0x2070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDaysElapsed;                                  // 0x2074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonFade;                                          // 0x2078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoonVisibleTime;                                   // 0x207C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27E0[0x4];                                     // 0x2084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPDA_GIUIData_C*                        DefaultUIData;                                     // 0x2088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          S__H;                                              // 0x2090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RuntimeTimeEnable;                                 // 0x2091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_27E1[0x2];                                     // 0x2092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightTickSecond;                               // 0x2094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightTickCounter;                              // 0x2098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUpdateMainLightDir;                           // 0x209C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27E2[0x3];                                     // 0x209D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDir;                                           // 0x20A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __4__H;                                            // 0x20A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          __yH;                                              // 0x20A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27E3[0x2];                                     // 0x20A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TempFogMaterial;                                   // 0x20A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TempFogDMI;                                        // 0x20B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SkyboxDMI;                                         // 0x20B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      SkyboxMaterial;                                    // 0x20C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunDiscColor;                                      // 0x20C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunScatterColor;                                   // 0x20D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSize;                                           // 0x20E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonDiscColor;                                     // 0x20EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonScatterColor;                                  // 0x20FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonSize;                                          // 0x210C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HorizonColor;                                      // 0x2110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonFalloff;                                    // 0x2120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ZenithColor;                                       // 0x2124(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtremWeatherWeight;                               // 0x2134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_TopColor;                                       // 0x2138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x2148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ST_TopWidth;                                       // 0x2158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27E4[0x4];                                     // 0x215C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharMainLightCurve;                                // 0x2160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CharSkyLightCurve;                                 // 0x2168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCharCustomLighting;                             // 0x2170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27E5[0x3];                                     // 0x2171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CharAmbientColor;                                  // 0x2174(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CharSkinAmbientColor;                              // 0x2184(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27E6[0x4];                                     // 0x2194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharShadowCurve;                                   // 0x2198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LightFunctionMaterial;                             // 0x21A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFunctionIntensity;                            // 0x21A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27E7[0x4];                                     // 0x21AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LightFunctionDMI;                                  // 0x21B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___y_0h;                                           // 0x21B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_27E8[0x7];                                     // 0x21B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LensFlareMI;                                       // 0x21C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LensFlareDMI;                                      // 0x21C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Nadir_Color;                                       // 0x21D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Nadir_Falloff;                                     // 0x21E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Scatter_Size;                                  // 0x21E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Scatter_Size;                                 // 0x21E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27E9[0x4];                                     // 0x21EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Stars_DMI;                                         // 0x21F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      StarsMaterial;                                     // 0x21F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               AuroraDMI;                                         // 0x2200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      AuroraMaterial;                                    // 0x2208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold_Mobile;          // 0x2210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold;                 // 0x2214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindDirection;                               // 0x2218(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindRightDirection;                          // 0x2224(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEBUG___y_0h__;                                    // 0x2230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Character_Rim_Color;                               // 0x2234(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealTimeOfDay;                                     // 0x2244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SunRotation;                                       // 0x2248(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GlobalGI_LaunchScene(int32 EntryPoint);
	void OnKuroSetRuntimeTime(float CurrentTime);
	void OnKuroRuntimeDestroy();
	void ReceiveBeginPlay();
	void OnKuroTickEditor(float Param_DeltaTime);
	void OnKuroTick(float Param_DeltaTime);
	void OnKuroInit();
	void OnKuroEndUI();
	void OnKuroStartUI(const class FString& InName, class ULevel* InUILevel);
	void UserConstructionScript();
	void UpdateGIData();
	void UpdateFog();
	void Update_Env();
	void Get2SkyboxLerpWeight(float StartSetting, float EndSetting, float CurrentTime, float* Weight);
	void UpdateLensFlares();
	void UpdateWind();
	void Is_Day(bool* Result);
	void InitMaterials();
	void Get_Light_Direction(struct FVector* SunLight, struct FVector* NightLight);
	void Get_Light_Rotator(struct FRotator* SunLight, struct FRotator* NightLight);
	void InitGICompoemnt();
	void Get_Scene_Light_Direction(struct FVector* LightDir);
	void Get_Scene_Light_Rotator(struct FRotator* SunLight, struct FRotator* NightLight);
	void UpdateSkyLight();
	void UpdateAtmosphere();
	void CalculateLightDirection(float Vertical, float Horizontal, float Time, struct FRotator* NewParam);
	void CalulateLightDirectionWithLimit(float V, float H, float Time, struct FRotator* NewParam);
	void InitFeature();
	void GetViewLocation(struct FVector* WorldPosition, bool* Suc);
	void UpdateTime();
	void UpdateMainLight();
	void Update_Main_Light_Direction();
	void UpdateLightParameters();
	void UpdatePostProcessVolume();
	void GetLightDirectionFromVH(float Vertical, float Horizontal, struct FRotator* Result);
	void UpdateLightShaft();
	void Start3DUIScene(class UPDA_GIUIData_C* UIGIData);
	void End3DUIScene();
	void SetUIComponentsVisibility(bool IsVisible);
	void Set_All_Components_States(bool IsEnable);
	void InitGI();
	void UpdateSkyDome();
	void Get_Total_TOD_Time_Elapsed(float* Time);
	void GetSkyDomeActor();
	void UpdateLightMPC();
	void _h();
	void MinusH();
	void ___0();
	void __0_Z();
	void _Z0_h();
	void _Z();
	void UpdateCloudCard(struct FKuroCloudCardSetting& CloudCardSetting);
	void UpdateDayNightDataLayer();
	void __();
	void _H_0();
	void _H();
	void Three_();
	void GetTrulyTime(float* CurTime);
	void UpdateFlowmapSkybox();
	void UpdateMisc();
	void UpdateSkybox();
	void GetSkyboxDMI(class UMaterialInstanceDynamic** DMIRet);
	void GetStarsDMI(class UMaterialInstanceDynamic** DMIRet);
	void GetAuroraDMI(class UMaterialInstanceDynamic** DMIRet);
	void ReloadRain();
	struct FVector EulerToForward(float Pitch, float Yaw);
	struct FLinearColor Clamp_Luminance(const struct FLinearColor& InColor, float Min, float Max);
	void GetTODCharacterLighting(const struct FLinearColor& MainLight, float MainLightIntensity, const struct FLinearColor& Param_SkyLight, float SkyLightIntensity, struct FLinearColor* FrontSideLight, struct FLinearColor* BackSideLight);
	void UpdateCharacterGI();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalGI_LaunchScene_C">();
	}
	static class ABP_GlobalGI_LaunchScene_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalGI_LaunchScene_C>();
	}
};
static_assert(alignof(ABP_GlobalGI_LaunchScene_C) == 0x000010, "Wrong alignment on ABP_GlobalGI_LaunchScene_C");
static_assert(sizeof(ABP_GlobalGI_LaunchScene_C) == 0x002260, "Wrong size on ABP_GlobalGI_LaunchScene_C");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UberGraphFrame) == 0x001F40, "Member 'ABP_GlobalGI_LaunchScene_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Com_Roc_01AS6) == 0x001F48, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Com_Roc_01AS6' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Com_Roc_01AS5) == 0x001F50, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Com_Roc_01AS5' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Com_Roc_01AS4) == 0x001F58, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Com_Roc_01AS4' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Com_Roc_01AS3) == 0x001F60, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Com_Roc_01AS3' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Com_Roc_01AS2) == 0x001F68, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Com_Roc_01AS2' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Com_Roc_01AS1) == 0x001F70, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Com_Roc_01AS1' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Com_Roc_01AS) == 0x001F78, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Com_Roc_01AS' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LUTPostProcess) == 0x001F80, "Member 'ABP_GlobalGI_LaunchScene_C::LUTPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Aurora) == 0x001F88, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Aurora' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Stars) == 0x001F90, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Stars' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Skybox) == 0x001F98, "Member 'ABP_GlobalGI_LaunchScene_C::Skybox' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalUiKuroPostProcess) == 0x001FA0, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalUiKuroPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalPostProcessVolume) == 0x001FA8, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalPostProcessVolume' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SceneLight) == 0x001FB0, "Member 'ABP_GlobalGI_LaunchScene_C::SceneLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmoMoonLight) == 0x001FB8, "Member 'ABP_GlobalGI_LaunchScene_C::AtmoMoonLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmoSunLight) == 0x001FC0, "Member 'ABP_GlobalGI_LaunchScene_C::AtmoSunLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyLight) == 0x001FC8, "Member 'ABP_GlobalGI_LaunchScene_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HeightFog) == 0x001FD0, "Member 'ABP_GlobalGI_LaunchScene_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DefaultSceneRoot) == 0x001FD8, "Member 'ABP_GlobalGI_LaunchScene_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharacterLightHorizontal) == 0x001FE0, "Member 'ABP_GlobalGI_LaunchScene_C::CharacterLightHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CurrTimeOfDay) == 0x001FE4, "Member 'ABP_GlobalGI_LaunchScene_C::CurrTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DeltaTime) == 0x001FE8, "Member 'ABP_GlobalGI_LaunchScene_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, EnableTODCycle) == 0x001FEC, "Member 'ABP_GlobalGI_LaunchScene_C::EnableTODCycle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, PauseTOD) == 0x001FED, "Member 'ABP_GlobalGI_LaunchScene_C::PauseTOD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, __h___) == 0x001FEE, "Member 'ABP_GlobalGI_LaunchScene_C::__h___' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TODCycleTime) == 0x001FF0, "Member 'ABP_GlobalGI_LaunchScene_C::TODCycleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmosphereSunRot) == 0x001FF4, "Member 'ABP_GlobalGI_LaunchScene_C::AtmosphereSunRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SenenDirLightRot) == 0x002000, "Member 'ABP_GlobalGI_LaunchScene_C::SenenDirLightRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, BP_SunHorizonAngle) == 0x00200C, "Member 'ABP_GlobalGI_LaunchScene_C::BP_SunHorizonAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, BP_SunVerticalAngle) == 0x002010, "Member 'ABP_GlobalGI_LaunchScene_C::BP_SunVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightHorizonAngle) == 0x002014, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightHorizonAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightVerticalAngle) == 0x002018, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightAngleLimit) == 0x00201C, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightAngleLimit' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsGIEnable) == 0x002020, "Member 'ABP_GlobalGI_LaunchScene_C::IsGIEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ____________) == 0x002021, "Member 'ABP_GlobalGI_LaunchScene_C::____________' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_______) == 0x002024, "Member 'ABP_GlobalGI_LaunchScene_C::SM_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Star3_r) == 0x002028, "Member 'ABP_GlobalGI_LaunchScene_C::Star3_r' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunLightExistTime) == 0x002038, "Member 'ABP_GlobalGI_LaunchScene_C::SunLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonLightExistTime) == 0x002048, "Member 'ABP_GlobalGI_LaunchScene_C::MoonLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, _L_______) == 0x002058, "Member 'ABP_GlobalGI_LaunchScene_C::_L_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UISceneRendering) == 0x002059, "Member 'ABP_GlobalGI_LaunchScene_C::UISceneRendering' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UIData) == 0x002060, "Member 'ABP_GlobalGI_LaunchScene_C::UIData' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG_UI) == 0x002068, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG_UI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsRootGI) == 0x002069, "Member 'ABP_GlobalGI_LaunchScene_C::IsRootGI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsEditorUpdate) == 0x00206A, "Member 'ABP_GlobalGI_LaunchScene_C::IsEditorUpdate' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ___rI__) == 0x00206B, "Member 'ABP_GlobalGI_LaunchScene_C::___rI__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, NinenI________rI__) == 0x00206C, "Member 'ABP_GlobalGI_LaunchScene_C::NinenI________rI__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG____r____I) == 0x00206D, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG____r____I' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG__r____I__) == 0x002070, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG__r____I__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TotalDaysElapsed) == 0x002074, "Member 'ABP_GlobalGI_LaunchScene_C::TotalDaysElapsed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonFade) == 0x002078, "Member 'ABP_GlobalGI_LaunchScene_C::MoonFade' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonVisibleTime) == 0x00207C, "Member 'ABP_GlobalGI_LaunchScene_C::MoonVisibleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DefaultUIData) == 0x002088, "Member 'ABP_GlobalGI_LaunchScene_C::DefaultUIData' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, S__H) == 0x002090, "Member 'ABP_GlobalGI_LaunchScene_C::S__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, RuntimeTimeEnable) == 0x002091, "Member 'ABP_GlobalGI_LaunchScene_C::RuntimeTimeEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightTickSecond) == 0x002094, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightTickSecond' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightTickCounter) == 0x002098, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightTickCounter' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ForceUpdateMainLightDir) == 0x00209C, "Member 'ABP_GlobalGI_LaunchScene_C::ForceUpdateMainLightDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, WindDir) == 0x0020A0, "Member 'ABP_GlobalGI_LaunchScene_C::WindDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, __4__H) == 0x0020A4, "Member 'ABP_GlobalGI_LaunchScene_C::__4__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, __yH) == 0x0020A5, "Member 'ABP_GlobalGI_LaunchScene_C::__yH' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TempFogMaterial) == 0x0020A8, "Member 'ABP_GlobalGI_LaunchScene_C::TempFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TempFogDMI) == 0x0020B0, "Member 'ABP_GlobalGI_LaunchScene_C::TempFogDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyboxDMI) == 0x0020B8, "Member 'ABP_GlobalGI_LaunchScene_C::SkyboxDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyboxMaterial) == 0x0020C0, "Member 'ABP_GlobalGI_LaunchScene_C::SkyboxMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunDiscColor) == 0x0020C8, "Member 'ABP_GlobalGI_LaunchScene_C::SunDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunScatterColor) == 0x0020D8, "Member 'ABP_GlobalGI_LaunchScene_C::SunScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunSize) == 0x0020E8, "Member 'ABP_GlobalGI_LaunchScene_C::SunSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonDiscColor) == 0x0020EC, "Member 'ABP_GlobalGI_LaunchScene_C::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonScatterColor) == 0x0020FC, "Member 'ABP_GlobalGI_LaunchScene_C::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonSize) == 0x00210C, "Member 'ABP_GlobalGI_LaunchScene_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HorizonColor) == 0x002110, "Member 'ABP_GlobalGI_LaunchScene_C::HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HorizonFalloff) == 0x002120, "Member 'ABP_GlobalGI_LaunchScene_C::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ZenithColor) == 0x002124, "Member 'ABP_GlobalGI_LaunchScene_C::ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ExtremWeatherWeight) == 0x002134, "Member 'ABP_GlobalGI_LaunchScene_C::ExtremWeatherWeight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_TopColor) == 0x002138, "Member 'ABP_GlobalGI_LaunchScene_C::ST_TopColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_DomeColorTint) == 0x002148, "Member 'ABP_GlobalGI_LaunchScene_C::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_TopWidth) == 0x002158, "Member 'ABP_GlobalGI_LaunchScene_C::ST_TopWidth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharMainLightCurve) == 0x002160, "Member 'ABP_GlobalGI_LaunchScene_C::CharMainLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharSkyLightCurve) == 0x002168, "Member 'ABP_GlobalGI_LaunchScene_C::CharSkyLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UseCharCustomLighting) == 0x002170, "Member 'ABP_GlobalGI_LaunchScene_C::UseCharCustomLighting' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharAmbientColor) == 0x002174, "Member 'ABP_GlobalGI_LaunchScene_C::CharAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharSkinAmbientColor) == 0x002184, "Member 'ABP_GlobalGI_LaunchScene_C::CharSkinAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharShadowCurve) == 0x002198, "Member 'ABP_GlobalGI_LaunchScene_C::CharShadowCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionMaterial) == 0x0021A0, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionIntensity) == 0x0021A8, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionDMI) == 0x0021B0, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ___y_0h) == 0x0021B8, "Member 'ABP_GlobalGI_LaunchScene_C::___y_0h' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LensFlareMI) == 0x0021C0, "Member 'ABP_GlobalGI_LaunchScene_C::LensFlareMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LensFlareDMI) == 0x0021C8, "Member 'ABP_GlobalGI_LaunchScene_C::LensFlareDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Nadir_Color) == 0x0021D0, "Member 'ABP_GlobalGI_LaunchScene_C::Nadir_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Nadir_Falloff) == 0x0021E0, "Member 'ABP_GlobalGI_LaunchScene_C::Nadir_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Sun_Scatter_Size) == 0x0021E4, "Member 'ABP_GlobalGI_LaunchScene_C::Sun_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Moon_Scatter_Size) == 0x0021E8, "Member 'ABP_GlobalGI_LaunchScene_C::Moon_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Stars_DMI) == 0x0021F0, "Member 'ABP_GlobalGI_LaunchScene_C::Stars_DMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, StarsMaterial) == 0x0021F8, "Member 'ABP_GlobalGI_LaunchScene_C::StarsMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AuroraDMI) == 0x002200, "Member 'ABP_GlobalGI_LaunchScene_C::AuroraDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AuroraMaterial) == 0x002208, "Member 'ABP_GlobalGI_LaunchScene_C::AuroraMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainDirectionLightUpdateThreshold_Mobile) == 0x002210, "Member 'ABP_GlobalGI_LaunchScene_C::MainDirectionLightUpdateThreshold_Mobile' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainDirectionLightUpdateThreshold) == 0x002214, "Member 'ABP_GlobalGI_LaunchScene_C::MainDirectionLightUpdateThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalWindDirection) == 0x002218, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalWindRightDirection) == 0x002224, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalWindRightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG___y_0h__) == 0x002230, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG___y_0h__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Character_Rim_Color) == 0x002234, "Member 'ABP_GlobalGI_LaunchScene_C::Character_Rim_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, RealTimeOfDay) == 0x002244, "Member 'ABP_GlobalGI_LaunchScene_C::RealTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunRotation) == 0x002248, "Member 'ABP_GlobalGI_LaunchScene_C::SunRotation' has a wrong offset!");

}

