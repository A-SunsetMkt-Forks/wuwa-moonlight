#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Clouds

#include "Basic.hpp"

#include "SGIData_structs.hpp"
#include "E_Cloud_Presents_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_Clouds.BP_Clouds_C.ExecuteUbergraph_BP_Clouds
// 0x00E0 (0x00E0 - 0x0000)
struct BP_Clouds_C_ExecuteUbergraph_BP_Clouds final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28EC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_SoftObjectReferenceToString_ReturnValue; // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                ___object_Variable;                                // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UPD_CloudPrefab_C*                      K2Node_DynamicCast_AsPD_Cloud_Prefab;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28ED[0x2];                                     // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> ___delegate_Variable;                              // 0x0044(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28EE[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds_1;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0064(0x0014)(ZeroConstructor, NoDestructor)
	E_Cloud_Presents                              K2Node_CustomEvent_CloudPresents;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28EF[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_ChangeSpeed_1;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsInEditor_1;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F0[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 K2Node_CustomEvent_Asset;                          // 0x0088(0x0030)(HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ChangeSpeed;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsInEditor;                     // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsAudio;                        // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F1[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_IsClosed_Variable;                         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F2[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPD_CloudPrefab_C*                      K2Node_DynamicCast_AsPD_Cloud_Prefab_1;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F3[0x3];                                     // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds) == 0x000008, "Wrong alignment on BP_Clouds_C_ExecuteUbergraph_BP_Clouds");
static_assert(sizeof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds) == 0x0000E0, "Wrong size on BP_Clouds_C_ExecuteUbergraph_BP_Clouds");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, EntryPoint) == 0x000000, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_Loaded) == 0x000008, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, CallFunc_Conv_SoftObjectReferenceToString_ReturnValue) == 0x000010, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::CallFunc_Conv_SoftObjectReferenceToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, ___object_Variable) == 0x000020, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::___object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, CallFunc_GetPathName_ReturnValue) == 0x000028, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_DynamicCast_AsPD_Cloud_Prefab) == 0x000038, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_DynamicCast_AsPD_Cloud_Prefab' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000041, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, ___delegate_Variable) == 0x000044, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::___delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, ___bool_Has_Been_Initd_Variable) == 0x000058, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_Event_DeltaSeconds_1) == 0x00005C, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_Event_DeltaSeconds_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_Event_DeltaSeconds) == 0x000060, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CreateDelegate_OutputDelegate) == 0x000064, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_CloudPresents) == 0x000078, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_CloudPresents' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_ChangeSpeed_1) == 0x00007C, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_ChangeSpeed_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_IsInEditor_1) == 0x000080, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_IsInEditor_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_SwitchEnum_CmpSuccess) == 0x000081, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_Asset) == 0x000088, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_Asset' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_ChangeSpeed) == 0x0000B8, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_ChangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_IsInEditor) == 0x0000BC, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_IsInEditor' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_CustomEvent_IsAudio) == 0x0000BD, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_CustomEvent_IsAudio' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x0000C0, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, ___bool_IsClosed_Variable) == 0x0000C8, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_DynamicCast_AsPD_Cloud_Prefab_1) == 0x0000D0, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_DynamicCast_AsPD_Cloud_Prefab_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_ExecuteUbergraph_BP_Clouds, CallFunc_PostEvent_ReturnValue) == 0x0000DC, "Member 'BP_Clouds_C_ExecuteUbergraph_BP_Clouds::CallFunc_PostEvent_ReturnValue' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.LoadAndSwitch
// 0x0038 (0x0038 - 0x0000)
struct BP_Clouds_C_LoadAndSwitch final
{
public:
	TSoftObjectPtr<class UObject>                 Asset;                                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	float                                         ChangeSpeed;                                       // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInEditor;                                        // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsAudio;                                           // 0x0035(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Clouds_C_LoadAndSwitch) == 0x000008, "Wrong alignment on BP_Clouds_C_LoadAndSwitch");
static_assert(sizeof(BP_Clouds_C_LoadAndSwitch) == 0x000038, "Wrong size on BP_Clouds_C_LoadAndSwitch");
static_assert(offsetof(BP_Clouds_C_LoadAndSwitch, Asset) == 0x000000, "Member 'BP_Clouds_C_LoadAndSwitch::Asset' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_LoadAndSwitch, ChangeSpeed) == 0x000030, "Member 'BP_Clouds_C_LoadAndSwitch::ChangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_LoadAndSwitch, IsInEditor) == 0x000034, "Member 'BP_Clouds_C_LoadAndSwitch::IsInEditor' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_LoadAndSwitch, IsAudio) == 0x000035, "Member 'BP_Clouds_C_LoadAndSwitch::IsAudio' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.Switch Clouds
// 0x000C (0x000C - 0x0000)
struct BP_Clouds_C_Switch_Clouds final
{
public:
	E_Cloud_Presents                              CloudPresents;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28F4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChangeSpeed;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInEditor;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Clouds_C_Switch_Clouds) == 0x000004, "Wrong alignment on BP_Clouds_C_Switch_Clouds");
static_assert(sizeof(BP_Clouds_C_Switch_Clouds) == 0x00000C, "Wrong size on BP_Clouds_C_Switch_Clouds");
static_assert(offsetof(BP_Clouds_C_Switch_Clouds, CloudPresents) == 0x000000, "Member 'BP_Clouds_C_Switch_Clouds::CloudPresents' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_Switch_Clouds, ChangeSpeed) == 0x000004, "Member 'BP_Clouds_C_Switch_Clouds::ChangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_Switch_Clouds, IsInEditor) == 0x000008, "Member 'BP_Clouds_C_Switch_Clouds::IsInEditor' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.EditorTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Clouds_C_EditorTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Clouds_C_EditorTick) == 0x000004, "Wrong alignment on BP_Clouds_C_EditorTick");
static_assert(sizeof(BP_Clouds_C_EditorTick) == 0x000004, "Wrong size on BP_Clouds_C_EditorTick");
static_assert(offsetof(BP_Clouds_C_EditorTick, DeltaSeconds) == 0x000000, "Member 'BP_Clouds_C_EditorTick::DeltaSeconds' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Clouds_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Clouds_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Clouds_C_ReceiveTick");
static_assert(sizeof(BP_Clouds_C_ReceiveTick) == 0x000004, "Wrong size on BP_Clouds_C_ReceiveTick");
static_assert(offsetof(BP_Clouds_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Clouds_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A
// 0x0008 (0x0008 - 0x0000)
struct BP_Clouds_C_OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Clouds_C_OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A) == 0x000008, "Wrong alignment on BP_Clouds_C_OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A");
static_assert(sizeof(BP_Clouds_C_OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A) == 0x000008, "Wrong size on BP_Clouds_C_OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A");
static_assert(offsetof(BP_Clouds_C_OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A, Loaded) == 0x000000, "Member 'BP_Clouds_C_OnLoaded_63FE5E2B437AFAD504FBCAB26242EB8A::Loaded' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.SwitchCloudsSub
// 0x0038 (0x0038 - 0x0000)
struct BP_Clouds_C_SwitchCloudsSub final
{
public:
	class UPD_CloudPrefab_C*                      CloudPresents;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChangeSpeed;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F5[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CloudPrefab_C*                      K2Node_DynamicCast_AsBP_Cloud_Prefab;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F6[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CloudPrefab_C*                      K2Node_DynamicCast_AsBP_Cloud_Prefab_1;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Clouds_C_SwitchCloudsSub) == 0x000008, "Wrong alignment on BP_Clouds_C_SwitchCloudsSub");
static_assert(sizeof(BP_Clouds_C_SwitchCloudsSub) == 0x000038, "Wrong size on BP_Clouds_C_SwitchCloudsSub");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, CloudPresents) == 0x000000, "Member 'BP_Clouds_C_SwitchCloudsSub::CloudPresents' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, ChangeSpeed) == 0x000008, "Member 'BP_Clouds_C_SwitchCloudsSub::ChangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, CallFunc_Array_Get_Item) == 0x00000C, "Member 'BP_Clouds_C_SwitchCloudsSub::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, CallFunc_Array_Get_Item_1) == 0x000010, "Member 'BP_Clouds_C_SwitchCloudsSub::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'BP_Clouds_C_SwitchCloudsSub::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, K2Node_DynamicCast_AsBP_Cloud_Prefab) == 0x000018, "Member 'BP_Clouds_C_SwitchCloudsSub::K2Node_DynamicCast_AsBP_Cloud_Prefab' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Clouds_C_SwitchCloudsSub::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'BP_Clouds_C_SwitchCloudsSub::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, CallFunc_IsValid_ReturnValue_1) == 0x000022, "Member 'BP_Clouds_C_SwitchCloudsSub::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, K2Node_DynamicCast_AsBP_Cloud_Prefab_1) == 0x000028, "Member 'BP_Clouds_C_SwitchCloudsSub::K2Node_DynamicCast_AsBP_Cloud_Prefab_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SwitchCloudsSub, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_Clouds_C_SwitchCloudsSub::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.SetCloudParameters
// 0x0028 (0x0028 - 0x0000)
struct BP_Clouds_C_SetCloudParameters final
{
public:
	class UPD_CloudPrefab_C*                      CloudPrefeb;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   CloudActorComponent;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChangeSpeed;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TransSortNumber;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CloudPrefab_C*                      K2Node_DynamicCast_AsBP_Cloud_Prefab;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Clouds_C_SetCloudParameters) == 0x000008, "Wrong alignment on BP_Clouds_C_SetCloudParameters");
static_assert(sizeof(BP_Clouds_C_SetCloudParameters) == 0x000028, "Wrong size on BP_Clouds_C_SetCloudParameters");
static_assert(offsetof(BP_Clouds_C_SetCloudParameters, CloudPrefeb) == 0x000000, "Member 'BP_Clouds_C_SetCloudParameters::CloudPrefeb' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SetCloudParameters, CloudActorComponent) == 0x000008, "Member 'BP_Clouds_C_SetCloudParameters::CloudActorComponent' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SetCloudParameters, ChangeSpeed) == 0x000010, "Member 'BP_Clouds_C_SetCloudParameters::ChangeSpeed' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SetCloudParameters, TransSortNumber) == 0x000014, "Member 'BP_Clouds_C_SetCloudParameters::TransSortNumber' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SetCloudParameters, K2Node_DynamicCast_AsBP_Cloud_Prefab) == 0x000018, "Member 'BP_Clouds_C_SetCloudParameters::K2Node_DynamicCast_AsBP_Cloud_Prefab' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_SetCloudParameters, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Clouds_C_SetCloudParameters::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Clouds.BP_Clouds_C.GetGIParams
// 0x0028 (0x0028 - 0x0000)
struct BP_Clouds_C_GetGIParams final
{
public:
	struct FSGIData                               GIData;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28F7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CloudPrefab_C*                      K2Node_DynamicCast_AsBP_Cloud_Prefab;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28F8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CloudPrefab_C*                      K2Node_DynamicCast_AsBP_Cloud_Prefab_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Clouds_C_GetGIParams) == 0x000008, "Wrong alignment on BP_Clouds_C_GetGIParams");
static_assert(sizeof(BP_Clouds_C_GetGIParams) == 0x000028, "Wrong size on BP_Clouds_C_GetGIParams");
static_assert(offsetof(BP_Clouds_C_GetGIParams, GIData) == 0x000000, "Member 'BP_Clouds_C_GetGIParams::GIData' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_GetGIParams, K2Node_DynamicCast_AsBP_Cloud_Prefab) == 0x000008, "Member 'BP_Clouds_C_GetGIParams::K2Node_DynamicCast_AsBP_Cloud_Prefab' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_GetGIParams, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Clouds_C_GetGIParams::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_GetGIParams, K2Node_DynamicCast_AsBP_Cloud_Prefab_1) == 0x000018, "Member 'BP_Clouds_C_GetGIParams::K2Node_DynamicCast_AsBP_Cloud_Prefab_1' has a wrong offset!");
static_assert(offsetof(BP_Clouds_C_GetGIParams, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'BP_Clouds_C_GetGIParams::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

