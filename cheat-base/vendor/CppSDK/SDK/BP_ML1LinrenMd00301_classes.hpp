#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ML1LinrenMd00301

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TsBaseCharacter_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ML1LinrenMd00301.BP_ML1LinrenMd00301_C
// 0x0080 (0x0800 - 0x0780)
class ABP_ML1LinrenMd00301_C final : public ATsBaseCharacter_C
{
public:
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ML1LinrenMd00301_C;              // 0x0778(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UKuroRegionDetectComponent*             KuroRegionDetect;                                  // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroRegionSphereComponent*             _4P9;                                              // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroAdjustableBoxComponent*            Root;                                              // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001RHand;                                       // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001RForearm;                                    // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001RUpperArm;                                   // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001LHand;                                       // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001LForearm;                                    // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001LUpperArm;                                   // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001RCalf;                                       // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001LCalf;                                       // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001RThigh;                                      // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001LThigh;                                      // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001Pelvis;                                      // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001Spine1;                                      // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Bip001Head;                                        // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ML1LinrenMd00301(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ML1LinrenMd00301_C">();
	}
	static class ABP_ML1LinrenMd00301_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ML1LinrenMd00301_C>();
	}
};
static_assert(alignof(ABP_ML1LinrenMd00301_C) == 0x000010, "Wrong alignment on ABP_ML1LinrenMd00301_C");
static_assert(sizeof(ABP_ML1LinrenMd00301_C) == 0x000800, "Wrong size on ABP_ML1LinrenMd00301_C");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, UberGraphFrame_BP_ML1LinrenMd00301_C) == 0x000778, "Member 'ABP_ML1LinrenMd00301_C::UberGraphFrame_BP_ML1LinrenMd00301_C' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, KuroRegionDetect) == 0x000780, "Member 'ABP_ML1LinrenMd00301_C::KuroRegionDetect' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, _4P9) == 0x000788, "Member 'ABP_ML1LinrenMd00301_C::_4P9' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Root) == 0x000790, "Member 'ABP_ML1LinrenMd00301_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001RHand) == 0x000798, "Member 'ABP_ML1LinrenMd00301_C::Bip001RHand' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001RForearm) == 0x0007A0, "Member 'ABP_ML1LinrenMd00301_C::Bip001RForearm' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001RUpperArm) == 0x0007A8, "Member 'ABP_ML1LinrenMd00301_C::Bip001RUpperArm' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001LHand) == 0x0007B0, "Member 'ABP_ML1LinrenMd00301_C::Bip001LHand' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001LForearm) == 0x0007B8, "Member 'ABP_ML1LinrenMd00301_C::Bip001LForearm' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001LUpperArm) == 0x0007C0, "Member 'ABP_ML1LinrenMd00301_C::Bip001LUpperArm' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001RCalf) == 0x0007C8, "Member 'ABP_ML1LinrenMd00301_C::Bip001RCalf' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001LCalf) == 0x0007D0, "Member 'ABP_ML1LinrenMd00301_C::Bip001LCalf' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001RThigh) == 0x0007D8, "Member 'ABP_ML1LinrenMd00301_C::Bip001RThigh' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001LThigh) == 0x0007E0, "Member 'ABP_ML1LinrenMd00301_C::Bip001LThigh' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001Pelvis) == 0x0007E8, "Member 'ABP_ML1LinrenMd00301_C::Bip001Pelvis' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001Spine1) == 0x0007F0, "Member 'ABP_ML1LinrenMd00301_C::Bip001Spine1' has a wrong offset!");
static_assert(offsetof(ABP_ML1LinrenMd00301_C, Bip001Head) == 0x0007F8, "Member 'ABP_ML1LinrenMd00301_C::Bip001Head' has a wrong offset!");

}

