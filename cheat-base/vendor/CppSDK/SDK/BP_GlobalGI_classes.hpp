#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalGI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KuroCurve_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Cloud_Presents_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalGI.BP_GlobalGI_C
// 0x0440 (0x24B0 - 0x2070)
class ABP_GlobalGI_C final : public AKuroGlobalGI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2070(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   RainOverrider;                                     // 0x2078(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroGlobalHeightMapComponent*          KuroGlobalHeightMap;                               // 0x2080(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CloudOcean;                                        // 0x2088(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroGlobalColorMapComponent*           KuroGlobalColorMap;                                // 0x2090(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MilkyWay;                                       // 0x2098(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UiSceneRenderingComponent_C*        BP_UiSceneRenderingComponent;                      // 0x20A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              GlobalUiScenePostProcess;                          // 0x20A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ImposterManager;                                   // 0x20B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS6;                                  // 0x20B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS5;                                  // 0x20C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS4;                                  // 0x20C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS3;                                  // 0x20D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS2;                                  // 0x20D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS1;                                  // 0x20E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Com_Roc_01AS;                                   // 0x20E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              LUTPostProcess;                                    // 0x20F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Stars;                                          // 0x20F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skybox;                                            // 0x2100(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  GlobalPostProcessVolume;                           // 0x2108(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             SceneLight;                                        // 0x2110(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoMoonLight;                                     // 0x2118(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoSunLight;                                      // 0x2120(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x2128(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x2130(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x2138(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLightHorizontal;                          // 0x2140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrTimeOfDay;                                     // 0x2144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTODCycle;                                    // 0x2148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PauseTOD;                                          // 0x2149(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          __h___;                                            // 0x214A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_214B[0x1];                                     // 0x214B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TODCycleTime;                                      // 0x214C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SenenDirLightRot;                                  // 0x2150(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MainLightAngleLimit;                               // 0x215C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGIEnable;                                        // 0x2160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ____________;                                      // 0x2161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2162[0x2];                                     // 0x2162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SM_______;                                         // 0x2164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Star3_r;                                           // 0x2168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      SunLightExistTime;                                 // 0x2178(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      MoonLightExistTime;                                // 0x2188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          _L_______;                                         // 0x2198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UISceneRendering;                                  // 0x2199(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRootGI;                                          // 0x219A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG____r____I;                                   // 0x219B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	float                                         DEBUG__r____I__;                                   // 0x219C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDaysElapsed;                                  // 0x21A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonFade;                                          // 0x21A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoonVisibleTime;                                   // 0x21A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __h_s_LensFlare;                                   // 0x21B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          S__H;                                              // 0x21B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RuntimeTimeEnable;                                 // 0x21B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_21B3[0x1];                                     // 0x21B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightTickSecond;                               // 0x21B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightTickCounter;                              // 0x21B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUpdateMainLightDir;                           // 0x21BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21BD[0x3];                                     // 0x21BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDir;                                           // 0x21C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __4__H;                                            // 0x21C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21C5[0x3];                                     // 0x21C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TempFogMaterial;                                   // 0x21C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TempFogDMI;                                        // 0x21D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      SkyboxMaterial;                                    // 0x21D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunDiscColor;                                      // 0x21E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunScatterColor;                                   // 0x21F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSize;                                           // 0x2200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonDiscColor;                                     // 0x2204(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonScatterColor;                                  // 0x2214(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonSize;                                          // 0x2224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HorizonColor;                                      // 0x2228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonFalloff;                                    // 0x2238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ZenithColor;                                       // 0x223C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtremWeatherWeight;                               // 0x224C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_TopColor;                                       // 0x2250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x2260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ST_TopWidth;                                       // 0x2270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2274[0x4];                                     // 0x2274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharMainLightCurve;                                // 0x2278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CharSkyLightCurve;                                 // 0x2280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCharCustomLighting;                             // 0x2288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2289[0x3];                                     // 0x2289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CharAmbientColor;                                  // 0x228C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CharSkinAmbientColor;                              // 0x229C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22AC[0x4];                                     // 0x22AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharShadowCurve;                                   // 0x22B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LightFunctionMaterial;                             // 0x22B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFunctionIntensity;                            // 0x22C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C4[0x4];                                     // 0x22C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LightFunctionDMI;                                  // 0x22C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___y_0h;                                           // 0x22D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_22D1[0x7];                                     // 0x22D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LensFlareMI;                                       // 0x22D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LensFlareDMI;                                      // 0x22E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MobileLensFlareMI_Ghost;                           // 0x22E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Nadir_Color;                                       // 0x22F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Nadir_Falloff;                                     // 0x2300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Scatter_Size;                                  // 0x2304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Scatter_Size;                                 // 0x2308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_230C[0x4];                                     // 0x230C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      StarsMaterial;                                     // 0x2310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold_Mobile;          // 0x2318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold;                 // 0x231C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindDirection;                               // 0x2320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindRightDirection;                          // 0x232C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEBUG___y_0h__;                                    // 0x2338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_233C[0x4];                                     // 0x233C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ControlTodTime_C*                   TodTimeController;                                 // 0x2340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealTimeOfDay;                                     // 0x2348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234C[0x4];                                     // 0x234C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Clouds_C*                           DynamicCloudsActor;                                // 0x2350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroDynamicCloudType                         LocalDynamicCloudsType;                            // 0x2358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2359[0x3];                                     // 0x2359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainDensityChangeSpeed;                            // 0x235C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainDensity;                                       // 0x2360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SnowDensity;                                       // 0x2364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainGravity;                                       // 0x2368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainGravityChangeSpeed;                            // 0x236C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainWindPower;                                     // 0x2370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RainWindPowerChangeSpeed;                          // 0x2374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSpawnEffect;                                    // 0x2378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2379[0x3];                                     // 0x2379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalSnowDensity;                                  // 0x237C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalRainDensity;                                  // 0x2380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalRainGravity;                                  // 0x2384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSkyLightShadowSupplement;                   // 0x2388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSkyLightReflectionAddIntensity;             // 0x238C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MobileLensFlareMI_Halo;                            // 0x2390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MobileLensFlareDMI_Ghost;                          // 0x2398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MobileLensFlareDMI_Halo;                           // 0x23A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             HeightMapTexture;                                  // 0x23A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeightMapUpdated;                                  // 0x23B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23B1[0x3];                                     // 0x23B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SunLightDirection;                                 // 0x23B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsComponentsEnable;                                // 0x23C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23C1[0x7];                                     // 0x23C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Last_LightFunction_Map;                            // 0x23C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               InitLightFunctionMap;                              // 0x23D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TODLightLoadingWait;                               // 0x23D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DayLightLoadingTime;                               // 0x23DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NightLightLoadingTime;                             // 0x23E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ComputeLightGridSkipFrames;                        // 0x23E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MilkyWayMaterial;                                  // 0x23E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ____Mn;                                            // 0x23F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23F1[0x3];                                     // 0x23F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DEBUG__r____I____;                                 // 0x23F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CallCloudChange;                                   // 0x23F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FKuroCurveFloat                        FogTImeControl;                                    // 0x2408(0x0090)(Edit, BlueprintVisible)
	bool                                          Is_Editor_Update;                                  // 0x2498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableImposterUpdate;                              // 0x2499(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249A[0x2];                                     // 0x249A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Clouds_Change_CD;                                  // 0x249C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Change_Time;                                // 0x24A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Change_Time_0;                              // 0x24A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ____p_e;                                           // 0x24A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void CallCloudChange__DelegateSignature(E_Cloud_Presents CloudPresents, float ChangeSpeed, bool IsinEditor);
	void ExecuteUbergraph_BP_GlobalGI(int32 EntryPoint);
	void OnKuroEndUiScene();
	void OnKuroStartUiScene(const class FString& InName, class ULevel* InUILevel);
	void OnKuroSetRuntimeTime(float CurrentTime);
	void OnKuroRuntimeDestroy();
	void ReceiveBeginPlay();
	void OnKuroInit();
	void OnKuroTick(float DeltaTime);
	void OnKuroTickEditor(float DeltaTime);
	void UserConstructionScript();
	void UpdateCharacterGI();
	void UpdateGIData(bool Skip_Lerp_Data);
	void UpdateFog();
	void Update_Env();
	void Get2SkyboxLerpWeight(float StartSetting, float EndSetting, float CurrentTime, float* Weight);
	void UpdateWind();
	void InitMaterials();
	void InitGICompoemnt();
	void Get_Scene_Light_Direction(struct FVector* LightDir);
	void UpdateSkyLight();
	void UpdateAtmosphere();
	void CalculateLightDirection(float Vertical, float Horizontal, float Time, struct FRotator* NewParam);
	void CalculateLightDirectionWithLimit(float V, float H, float Time, struct FRotator* NewParam);
	void InitFeature();
	void GetViewLocation(struct FVector* WorldPosition, bool* Suc);
	void UpdateTime();
	void Update_UI_Env();
	void Update_Main_Light();
	void Update_Light_Direction();
	void UpdateLightParameters();
	void UpdatePostProcessVolume();
	void GetLightDirectionFromVH(float Vertical, float Horizontal, struct FRotator* Result);
	void UpdateLightShaft();
	void Set_All_Components_States(bool IsEnable);
	void InitGI();
	void UpdateSkyDome();
	void _h();
	void MinusH();
	void ___0();
	void __0_Z();
	void _Z0_h();
	void _Z();
	void UpdateCloudCard(struct FKuroCloudCardSetting& CloudCardSetting);
	void Update_Day_Night_Data_Layer();
	void __();
	void _H_0();
	void _H();
	void Three_();
	void UpdateFlowmapSkybox();
	void UpdateMisc();
	void UpdateSkybox();
	void GetSkyboxDMI(class UMaterialInstanceDynamic** DMIRet);
	void UpdateClusteredStuff();
	void GetStarsDMI(class UMaterialInstanceDynamic** DMIRet);
	void SetLevelSequenceTimeControl(class ABP_ControlTodTime_C* TodTimeControl);
	void Update_Dynamic_Clouds();
	struct FVector EulerToForward(float Pitch, float Yaw);
	struct FLinearColor Clamp_Luminance(const struct FLinearColor& InColor, float Min, float Max);
	void GetParallaxCorrectCachedShadowDirection(struct FRotator* NewParam);
	void GetTODCharacterLighting(const struct FLinearColor& MainLight, float MainLightIntensity, const struct FLinearColor& SkyLight_0, float SkyLightIntensity, struct FLinearColor* FrontSideLight, struct FLinearColor* BackSideLight);
	void GetParallaxCorrectCachedCrossFadeShadowDirection(struct FRotator* NewParam);
	void UpdateLightFunctions();
	void GetMilkyWayDMI(class UMaterialInstanceDynamic** DMIRet);
	void UpdateMilkWay(class UMaterialInstanceDynamic*& MilkyWay_DMI, struct FKuroMilkyWaySetting& CloudCardSetting);
	void UpdateBigWorld();
	void OnGlobalGITick();
	void UpdateEditor();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalGI_C">();
	}
	static class ABP_GlobalGI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalGI_C>();
	}
};
static_assert(alignof(ABP_GlobalGI_C) == 0x000010, "Wrong alignment on ABP_GlobalGI_C");
static_assert(sizeof(ABP_GlobalGI_C) == 0x0024B0, "Wrong size on ABP_GlobalGI_C");
static_assert(offsetof(ABP_GlobalGI_C, UberGraphFrame) == 0x002070, "Member 'ABP_GlobalGI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainOverrider) == 0x002078, "Member 'ABP_GlobalGI_C::RainOverrider' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroGlobalHeightMap) == 0x002080, "Member 'ABP_GlobalGI_C::KuroGlobalHeightMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CloudOcean) == 0x002088, "Member 'ABP_GlobalGI_C::CloudOcean' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, KuroGlobalColorMap) == 0x002090, "Member 'ABP_GlobalGI_C::KuroGlobalColorMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_MilkyWay) == 0x002098, "Member 'ABP_GlobalGI_C::SM_MilkyWay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, BP_UiSceneRenderingComponent) == 0x0020A0, "Member 'ABP_GlobalGI_C::BP_UiSceneRenderingComponent' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalUiScenePostProcess) == 0x0020A8, "Member 'ABP_GlobalGI_C::GlobalUiScenePostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ImposterManager) == 0x0020B0, "Member 'ABP_GlobalGI_C::ImposterManager' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS6) == 0x0020B8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS6' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS5) == 0x0020C0, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS5' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS4) == 0x0020C8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS4' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS3) == 0x0020D0, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS3' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS2) == 0x0020D8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS2' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS1) == 0x0020E0, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS1' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Com_Roc_01AS) == 0x0020E8, "Member 'ABP_GlobalGI_C::SM_Com_Roc_01AS' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LUTPostProcess) == 0x0020F0, "Member 'ABP_GlobalGI_C::LUTPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_Stars) == 0x0020F8, "Member 'ABP_GlobalGI_C::SM_Stars' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Skybox) == 0x002100, "Member 'ABP_GlobalGI_C::Skybox' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalPostProcessVolume) == 0x002108, "Member 'ABP_GlobalGI_C::GlobalPostProcessVolume' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SceneLight) == 0x002110, "Member 'ABP_GlobalGI_C::SceneLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, AtmoMoonLight) == 0x002118, "Member 'ABP_GlobalGI_C::AtmoMoonLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, AtmoSunLight) == 0x002120, "Member 'ABP_GlobalGI_C::AtmoSunLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SkyLight) == 0x002128, "Member 'ABP_GlobalGI_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightFog) == 0x002130, "Member 'ABP_GlobalGI_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSceneRoot) == 0x002138, "Member 'ABP_GlobalGI_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharacterLightHorizontal) == 0x002140, "Member 'ABP_GlobalGI_C::CharacterLightHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CurrTimeOfDay) == 0x002144, "Member 'ABP_GlobalGI_C::CurrTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, EnableTODCycle) == 0x002148, "Member 'ABP_GlobalGI_C::EnableTODCycle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, PauseTOD) == 0x002149, "Member 'ABP_GlobalGI_C::PauseTOD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, __h___) == 0x00214A, "Member 'ABP_GlobalGI_C::__h___' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TODCycleTime) == 0x00214C, "Member 'ABP_GlobalGI_C::TODCycleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SenenDirLightRot) == 0x002150, "Member 'ABP_GlobalGI_C::SenenDirLightRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightAngleLimit) == 0x00215C, "Member 'ABP_GlobalGI_C::MainLightAngleLimit' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsGIEnable) == 0x002160, "Member 'ABP_GlobalGI_C::IsGIEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ____________) == 0x002161, "Member 'ABP_GlobalGI_C::____________' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SM_______) == 0x002164, "Member 'ABP_GlobalGI_C::SM_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Star3_r) == 0x002168, "Member 'ABP_GlobalGI_C::Star3_r' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunLightExistTime) == 0x002178, "Member 'ABP_GlobalGI_C::SunLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonLightExistTime) == 0x002188, "Member 'ABP_GlobalGI_C::MoonLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, _L_______) == 0x002198, "Member 'ABP_GlobalGI_C::_L_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UISceneRendering) == 0x002199, "Member 'ABP_GlobalGI_C::UISceneRendering' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsRootGI) == 0x00219A, "Member 'ABP_GlobalGI_C::IsRootGI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG____r____I) == 0x00219B, "Member 'ABP_GlobalGI_C::DEBUG____r____I' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG__r____I__) == 0x00219C, "Member 'ABP_GlobalGI_C::DEBUG__r____I__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TotalDaysElapsed) == 0x0021A0, "Member 'ABP_GlobalGI_C::TotalDaysElapsed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonFade) == 0x0021A4, "Member 'ABP_GlobalGI_C::MoonFade' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonVisibleTime) == 0x0021A8, "Member 'ABP_GlobalGI_C::MoonVisibleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, __h_s_LensFlare) == 0x0021B0, "Member 'ABP_GlobalGI_C::__h_s_LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, S__H) == 0x0021B1, "Member 'ABP_GlobalGI_C::S__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RuntimeTimeEnable) == 0x0021B2, "Member 'ABP_GlobalGI_C::RuntimeTimeEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightTickSecond) == 0x0021B4, "Member 'ABP_GlobalGI_C::MainLightTickSecond' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainLightTickCounter) == 0x0021B8, "Member 'ABP_GlobalGI_C::MainLightTickCounter' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ForceUpdateMainLightDir) == 0x0021BC, "Member 'ABP_GlobalGI_C::ForceUpdateMainLightDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, WindDir) == 0x0021C0, "Member 'ABP_GlobalGI_C::WindDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, __4__H) == 0x0021C4, "Member 'ABP_GlobalGI_C::__4__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TempFogMaterial) == 0x0021C8, "Member 'ABP_GlobalGI_C::TempFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TempFogDMI) == 0x0021D0, "Member 'ABP_GlobalGI_C::TempFogDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SkyboxMaterial) == 0x0021D8, "Member 'ABP_GlobalGI_C::SkyboxMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunDiscColor) == 0x0021E0, "Member 'ABP_GlobalGI_C::SunDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunScatterColor) == 0x0021F0, "Member 'ABP_GlobalGI_C::SunScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunSize) == 0x002200, "Member 'ABP_GlobalGI_C::SunSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonDiscColor) == 0x002204, "Member 'ABP_GlobalGI_C::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonScatterColor) == 0x002214, "Member 'ABP_GlobalGI_C::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MoonSize) == 0x002224, "Member 'ABP_GlobalGI_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HorizonColor) == 0x002228, "Member 'ABP_GlobalGI_C::HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HorizonFalloff) == 0x002238, "Member 'ABP_GlobalGI_C::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ZenithColor) == 0x00223C, "Member 'ABP_GlobalGI_C::ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ExtremWeatherWeight) == 0x00224C, "Member 'ABP_GlobalGI_C::ExtremWeatherWeight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_TopColor) == 0x002250, "Member 'ABP_GlobalGI_C::ST_TopColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_DomeColorTint) == 0x002260, "Member 'ABP_GlobalGI_C::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ST_TopWidth) == 0x002270, "Member 'ABP_GlobalGI_C::ST_TopWidth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharMainLightCurve) == 0x002278, "Member 'ABP_GlobalGI_C::CharMainLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharSkyLightCurve) == 0x002280, "Member 'ABP_GlobalGI_C::CharSkyLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, UseCharCustomLighting) == 0x002288, "Member 'ABP_GlobalGI_C::UseCharCustomLighting' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharAmbientColor) == 0x00228C, "Member 'ABP_GlobalGI_C::CharAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharSkinAmbientColor) == 0x00229C, "Member 'ABP_GlobalGI_C::CharSkinAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CharShadowCurve) == 0x0022B0, "Member 'ABP_GlobalGI_C::CharShadowCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionMaterial) == 0x0022B8, "Member 'ABP_GlobalGI_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionIntensity) == 0x0022C0, "Member 'ABP_GlobalGI_C::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LightFunctionDMI) == 0x0022C8, "Member 'ABP_GlobalGI_C::LightFunctionDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ___y_0h) == 0x0022D0, "Member 'ABP_GlobalGI_C::___y_0h' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LensFlareMI) == 0x0022D8, "Member 'ABP_GlobalGI_C::LensFlareMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LensFlareDMI) == 0x0022E0, "Member 'ABP_GlobalGI_C::LensFlareDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareMI_Ghost) == 0x0022E8, "Member 'ABP_GlobalGI_C::MobileLensFlareMI_Ghost' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Nadir_Color) == 0x0022F0, "Member 'ABP_GlobalGI_C::Nadir_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Nadir_Falloff) == 0x002300, "Member 'ABP_GlobalGI_C::Nadir_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Sun_Scatter_Size) == 0x002304, "Member 'ABP_GlobalGI_C::Sun_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Moon_Scatter_Size) == 0x002308, "Member 'ABP_GlobalGI_C::Moon_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, StarsMaterial) == 0x002310, "Member 'ABP_GlobalGI_C::StarsMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainDirectionLightUpdateThreshold_Mobile) == 0x002318, "Member 'ABP_GlobalGI_C::MainDirectionLightUpdateThreshold_Mobile' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MainDirectionLightUpdateThreshold) == 0x00231C, "Member 'ABP_GlobalGI_C::MainDirectionLightUpdateThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalWindDirection) == 0x002320, "Member 'ABP_GlobalGI_C::GlobalWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, GlobalWindRightDirection) == 0x00232C, "Member 'ABP_GlobalGI_C::GlobalWindRightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG___y_0h__) == 0x002338, "Member 'ABP_GlobalGI_C::DEBUG___y_0h__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TodTimeController) == 0x002340, "Member 'ABP_GlobalGI_C::TodTimeController' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RealTimeOfDay) == 0x002348, "Member 'ABP_GlobalGI_C::RealTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DynamicCloudsActor) == 0x002350, "Member 'ABP_GlobalGI_C::DynamicCloudsActor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, LocalDynamicCloudsType) == 0x002358, "Member 'ABP_GlobalGI_C::LocalDynamicCloudsType' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainDensityChangeSpeed) == 0x00235C, "Member 'ABP_GlobalGI_C::RainDensityChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainDensity) == 0x002360, "Member 'ABP_GlobalGI_C::RainDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SnowDensity) == 0x002364, "Member 'ABP_GlobalGI_C::SnowDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainGravity) == 0x002368, "Member 'ABP_GlobalGI_C::RainGravity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainGravityChangeSpeed) == 0x00236C, "Member 'ABP_GlobalGI_C::RainGravityChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainWindPower) == 0x002370, "Member 'ABP_GlobalGI_C::RainWindPower' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, RainWindPowerChangeSpeed) == 0x002374, "Member 'ABP_GlobalGI_C::RainWindPowerChangeSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CanSpawnEffect) == 0x002378, "Member 'ABP_GlobalGI_C::CanSpawnEffect' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalSnowDensity) == 0x00237C, "Member 'ABP_GlobalGI_C::FinalSnowDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalRainDensity) == 0x002380, "Member 'ABP_GlobalGI_C::FinalRainDensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FinalRainGravity) == 0x002384, "Member 'ABP_GlobalGI_C::FinalRainGravity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSkyLightShadowSupplement) == 0x002388, "Member 'ABP_GlobalGI_C::DefaultSkyLightShadowSupplement' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DefaultSkyLightReflectionAddIntensity) == 0x00238C, "Member 'ABP_GlobalGI_C::DefaultSkyLightReflectionAddIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareMI_Halo) == 0x002390, "Member 'ABP_GlobalGI_C::MobileLensFlareMI_Halo' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareDMI_Ghost) == 0x002398, "Member 'ABP_GlobalGI_C::MobileLensFlareDMI_Ghost' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MobileLensFlareDMI_Halo) == 0x0023A0, "Member 'ABP_GlobalGI_C::MobileLensFlareDMI_Halo' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightMapTexture) == 0x0023A8, "Member 'ABP_GlobalGI_C::HeightMapTexture' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, HeightMapUpdated) == 0x0023B0, "Member 'ABP_GlobalGI_C::HeightMapUpdated' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, SunLightDirection) == 0x0023B4, "Member 'ABP_GlobalGI_C::SunLightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, IsComponentsEnable) == 0x0023C0, "Member 'ABP_GlobalGI_C::IsComponentsEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Last_LightFunction_Map) == 0x0023C8, "Member 'ABP_GlobalGI_C::Last_LightFunction_Map' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, InitLightFunctionMap) == 0x0023D0, "Member 'ABP_GlobalGI_C::InitLightFunctionMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, TODLightLoadingWait) == 0x0023D8, "Member 'ABP_GlobalGI_C::TODLightLoadingWait' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DayLightLoadingTime) == 0x0023DC, "Member 'ABP_GlobalGI_C::DayLightLoadingTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, NightLightLoadingTime) == 0x0023E0, "Member 'ABP_GlobalGI_C::NightLightLoadingTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ComputeLightGridSkipFrames) == 0x0023E4, "Member 'ABP_GlobalGI_C::ComputeLightGridSkipFrames' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, MilkyWayMaterial) == 0x0023E8, "Member 'ABP_GlobalGI_C::MilkyWayMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ____Mn) == 0x0023F0, "Member 'ABP_GlobalGI_C::____Mn' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, DEBUG__r____I____) == 0x0023F4, "Member 'ABP_GlobalGI_C::DEBUG__r____I____' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, CallCloudChange) == 0x0023F8, "Member 'ABP_GlobalGI_C::CallCloudChange' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, FogTImeControl) == 0x002408, "Member 'ABP_GlobalGI_C::FogTImeControl' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Is_Editor_Update) == 0x002498, "Member 'ABP_GlobalGI_C::Is_Editor_Update' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, EnableImposterUpdate) == 0x002499, "Member 'ABP_GlobalGI_C::EnableImposterUpdate' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_CD) == 0x00249C, "Member 'ABP_GlobalGI_C::Clouds_Change_CD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_Time) == 0x0024A0, "Member 'ABP_GlobalGI_C::Clouds_Change_Time' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, Clouds_Change_Time_0) == 0x0024A4, "Member 'ABP_GlobalGI_C::Clouds_Change_Time_0' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_C, ____p_e) == 0x0024A8, "Member 'ABP_GlobalGI_C::____p_e' has a wrong offset!");

}

