#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalGI_LaunchScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalGI_LaunchScene.BP_GlobalGI_LaunchScene_C
// 0x02B0 (0x2320 - 0x2070)
class ABP_GlobalGI_LaunchScene_C final : public AKuroGlobalGI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2070(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UKuroPostProcessComponent*              LUTPostProcess;                                    // 0x2078(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skybox;                                            // 0x2080(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              GlobalUiKuroPostProcess;                           // 0x2088(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  GlobalPostProcessVolume;                           // 0x2090(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             SceneLight;                                        // 0x2098(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoMoonLight;                                     // 0x20A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoSunLight;                                      // 0x20A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x20B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x20B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x20C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLightHorizontal;                          // 0x20C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrTimeOfDay;                                     // 0x20CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x20D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTODCycle;                                    // 0x20D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PauseTOD;                                          // 0x20D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          __h___;                                            // 0x20D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173D[0x1];                                     // 0x20D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TODCycleTime;                                      // 0x20D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AtmosphereSunRot;                                  // 0x20DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               SenenDirLightRot;                                  // 0x20E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BP_SunHorizonAngle;                                // 0x20F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BP_SunVerticalAngle;                               // 0x20F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightHorizonAngle;                             // 0x20FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightVerticalAngle;                            // 0x2100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightAngleLimit;                               // 0x2104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGIEnable;                                        // 0x2108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ____________;                                      // 0x2109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173E[0x2];                                     // 0x210A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SM_______;                                         // 0x210C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Star3_r;                                           // 0x2110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      SunLightExistTime;                                 // 0x2120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      MoonLightExistTime;                                // 0x2130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          _L_______;                                         // 0x2140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UISceneRendering;                                  // 0x2141(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_173F[0x6];                                     // 0x2142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPDA_GIUIData_C*                        UIData;                                            // 0x2148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_UI;                                          // 0x2150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsRootGI;                                          // 0x2151(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEditorUpdate;                                    // 0x2152(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ___rI__;                                           // 0x2153(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NinenI________rI__;                                // 0x2154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG____r____I;                                   // 0x2155(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1740[0x2];                                     // 0x2156(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DEBUG__r____I__;                                   // 0x2158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDaysElapsed;                                  // 0x215C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonFade;                                          // 0x2160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoonVisibleTime;                                   // 0x2164(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          S__H;                                              // 0x216C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RuntimeTimeEnable;                                 // 0x216D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_1741[0x2];                                     // 0x216E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightTickSecond;                               // 0x2170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightTickCounter;                              // 0x2174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUpdateMainLightDir;                           // 0x2178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1742[0x3];                                     // 0x2179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDir;                                           // 0x217C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __4__H;                                            // 0x2180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          __yH;                                              // 0x2181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1743[0x6];                                     // 0x2182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TempFogMaterial;                                   // 0x2188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TempFogDMI;                                        // 0x2190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SkyboxDMI;                                         // 0x2198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      SkyboxMaterial;                                    // 0x21A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunDiscColor;                                      // 0x21A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunScatterColor;                                   // 0x21B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSize;                                           // 0x21C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonDiscColor;                                     // 0x21CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonScatterColor;                                  // 0x21DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonSize;                                          // 0x21EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HorizonColor;                                      // 0x21F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonFalloff;                                    // 0x2200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ZenithColor;                                       // 0x2204(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtremWeatherWeight;                               // 0x2214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_TopColor;                                       // 0x2218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x2228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ST_TopWidth;                                       // 0x2238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1744[0x4];                                     // 0x223C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharMainLightCurve;                                // 0x2240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CharSkyLightCurve;                                 // 0x2248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCharCustomLighting;                             // 0x2250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1745[0x3];                                     // 0x2251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CharAmbientColor;                                  // 0x2254(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CharSkinAmbientColor;                              // 0x2264(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1746[0x4];                                     // 0x2274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharShadowCurve;                                   // 0x2278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LightFunctionMaterial;                             // 0x2280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFunctionIntensity;                            // 0x2288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1747[0x4];                                     // 0x228C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LightFunctionDMI;                                  // 0x2290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___y_0h;                                           // 0x2298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_1748[0x7];                                     // 0x2299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LensFlareMI;                                       // 0x22A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LensFlareDMI;                                      // 0x22A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Nadir_Color;                                       // 0x22B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Nadir_Falloff;                                     // 0x22C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Scatter_Size;                                  // 0x22C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Scatter_Size;                                 // 0x22C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold_Mobile;          // 0x22CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold;                 // 0x22D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindDirection;                               // 0x22D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindRightDirection;                          // 0x22E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEBUG___y_0h__;                                    // 0x22EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Character_Rim_Color;                               // 0x22F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealTimeOfDay;                                     // 0x2300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SunRotation;                                       // 0x2304(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DEBUG__r____I____;                                 // 0x2310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GlobalGI_LaunchScene(int32 EntryPoint);
	void OnKuroSetRuntimeTime(float CurrentTime);
	void OnKuroRuntimeDestroy();
	void ReceiveBeginPlay();
	void OnKuroTickEditor(float Param_DeltaTime);
	void OnKuroTick(float Param_DeltaTime);
	void OnKuroInit();
	void OnKuroEndUI();
	void OnKuroStartUI(const class FString& InName, class ULevel* InUILevel);
	void UserConstructionScript();
	void UpdateGIData();
	void UpdateFog();
	void Update_Env();
	void Get2SkyboxLerpWeight(float StartSetting, float EndSetting, float CurrentTime, float* Weight);
	void UpdateLensFlares();
	void UpdateWind();
	void Is_Day(bool* Result);
	void InitMaterials();
	void Get_Light_Direction(struct FVector* SunLight, struct FVector* NightLight);
	void Get_Light_Rotator(struct FRotator* SunLight, struct FRotator* NightLight);
	void InitGICompoemnt();
	void Get_Scene_Light_Direction(struct FVector* LightDir);
	void Get_Scene_Light_Rotator(struct FRotator* SunLight, struct FRotator* NightLight);
	void UpdateSkyLight();
	void UpdateAtmosphere();
	void CalculateLightDirection(float Vertical, float Horizontal, float Time, struct FRotator* NewParam);
	void CalulateLightDirectionWithLimit(float V, float H, float Time, struct FRotator* NewParam);
	void InitFeature();
	void GetViewLocation(struct FVector* WorldPosition, bool* Suc);
	void UpdateTime();
	void UpdateMainLight();
	void Update_Main_Light_Direction();
	void UpdateLightParameters();
	void UpdatePostProcessVolume();
	void GetLightDirectionFromVH(float Vertical, float Horizontal, struct FRotator* Result);
	void UpdateLightShaft();
	void Start3DUIScene(class UPDA_GIUIData_C* UIGIData);
	void End3DUIScene();
	void SetUIComponentsVisibility(bool IsVisible);
	void Set_All_Components_States(bool IsEnable);
	void InitGI();
	void UpdateSkyDome();
	void Get_Total_TOD_Time_Elapsed(float* Time);
	void GetSkyDomeActor();
	void UpdateLightMPC();
	void _h();
	void MinusH();
	void ___0();
	void __0_Z();
	void _Z0_h();
	void _Z();
	void UpdateDayNightDataLayer();
	void __();
	void _H_0();
	void _H();
	void Three_();
	void GetTrulyTime(float* CurTime);
	void UpdateFlowmapSkybox();
	void UpdateMisc();
	void UpdateSkybox();
	void GetSkyboxDMI(class UMaterialInstanceDynamic** DMIRet);
	void ReloadRain();
	struct FVector EulerToForward(float Pitch, float Yaw);
	struct FLinearColor Clamp_Luminance(const struct FLinearColor& InColor, float Min, float Max);
	void GetTODCharacterLighting(const struct FLinearColor& MainLight, float MainLightIntensity, const struct FLinearColor& Param_SkyLight, float SkyLightIntensity, struct FLinearColor* FrontSideLight, struct FLinearColor* BackSideLight);
	void UpdateCharacterGI();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalGI_LaunchScene_C">();
	}
	static class ABP_GlobalGI_LaunchScene_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalGI_LaunchScene_C>();
	}
};
static_assert(alignof(ABP_GlobalGI_LaunchScene_C) == 0x000010, "Wrong alignment on ABP_GlobalGI_LaunchScene_C");
static_assert(sizeof(ABP_GlobalGI_LaunchScene_C) == 0x002320, "Wrong size on ABP_GlobalGI_LaunchScene_C");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UberGraphFrame) == 0x002070, "Member 'ABP_GlobalGI_LaunchScene_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LUTPostProcess) == 0x002078, "Member 'ABP_GlobalGI_LaunchScene_C::LUTPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Skybox) == 0x002080, "Member 'ABP_GlobalGI_LaunchScene_C::Skybox' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalUiKuroPostProcess) == 0x002088, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalUiKuroPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalPostProcessVolume) == 0x002090, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalPostProcessVolume' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SceneLight) == 0x002098, "Member 'ABP_GlobalGI_LaunchScene_C::SceneLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmoMoonLight) == 0x0020A0, "Member 'ABP_GlobalGI_LaunchScene_C::AtmoMoonLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmoSunLight) == 0x0020A8, "Member 'ABP_GlobalGI_LaunchScene_C::AtmoSunLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyLight) == 0x0020B0, "Member 'ABP_GlobalGI_LaunchScene_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HeightFog) == 0x0020B8, "Member 'ABP_GlobalGI_LaunchScene_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DefaultSceneRoot) == 0x0020C0, "Member 'ABP_GlobalGI_LaunchScene_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharacterLightHorizontal) == 0x0020C8, "Member 'ABP_GlobalGI_LaunchScene_C::CharacterLightHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CurrTimeOfDay) == 0x0020CC, "Member 'ABP_GlobalGI_LaunchScene_C::CurrTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DeltaTime) == 0x0020D0, "Member 'ABP_GlobalGI_LaunchScene_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, EnableTODCycle) == 0x0020D4, "Member 'ABP_GlobalGI_LaunchScene_C::EnableTODCycle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, PauseTOD) == 0x0020D5, "Member 'ABP_GlobalGI_LaunchScene_C::PauseTOD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, __h___) == 0x0020D6, "Member 'ABP_GlobalGI_LaunchScene_C::__h___' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TODCycleTime) == 0x0020D8, "Member 'ABP_GlobalGI_LaunchScene_C::TODCycleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmosphereSunRot) == 0x0020DC, "Member 'ABP_GlobalGI_LaunchScene_C::AtmosphereSunRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SenenDirLightRot) == 0x0020E8, "Member 'ABP_GlobalGI_LaunchScene_C::SenenDirLightRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, BP_SunHorizonAngle) == 0x0020F4, "Member 'ABP_GlobalGI_LaunchScene_C::BP_SunHorizonAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, BP_SunVerticalAngle) == 0x0020F8, "Member 'ABP_GlobalGI_LaunchScene_C::BP_SunVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightHorizonAngle) == 0x0020FC, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightHorizonAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightVerticalAngle) == 0x002100, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightAngleLimit) == 0x002104, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightAngleLimit' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsGIEnable) == 0x002108, "Member 'ABP_GlobalGI_LaunchScene_C::IsGIEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ____________) == 0x002109, "Member 'ABP_GlobalGI_LaunchScene_C::____________' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_______) == 0x00210C, "Member 'ABP_GlobalGI_LaunchScene_C::SM_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Star3_r) == 0x002110, "Member 'ABP_GlobalGI_LaunchScene_C::Star3_r' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunLightExistTime) == 0x002120, "Member 'ABP_GlobalGI_LaunchScene_C::SunLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonLightExistTime) == 0x002130, "Member 'ABP_GlobalGI_LaunchScene_C::MoonLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, _L_______) == 0x002140, "Member 'ABP_GlobalGI_LaunchScene_C::_L_______' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UISceneRendering) == 0x002141, "Member 'ABP_GlobalGI_LaunchScene_C::UISceneRendering' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UIData) == 0x002148, "Member 'ABP_GlobalGI_LaunchScene_C::UIData' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG_UI) == 0x002150, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG_UI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsRootGI) == 0x002151, "Member 'ABP_GlobalGI_LaunchScene_C::IsRootGI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsEditorUpdate) == 0x002152, "Member 'ABP_GlobalGI_LaunchScene_C::IsEditorUpdate' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ___rI__) == 0x002153, "Member 'ABP_GlobalGI_LaunchScene_C::___rI__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, NinenI________rI__) == 0x002154, "Member 'ABP_GlobalGI_LaunchScene_C::NinenI________rI__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG____r____I) == 0x002155, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG____r____I' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG__r____I__) == 0x002158, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG__r____I__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TotalDaysElapsed) == 0x00215C, "Member 'ABP_GlobalGI_LaunchScene_C::TotalDaysElapsed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonFade) == 0x002160, "Member 'ABP_GlobalGI_LaunchScene_C::MoonFade' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonVisibleTime) == 0x002164, "Member 'ABP_GlobalGI_LaunchScene_C::MoonVisibleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, S__H) == 0x00216C, "Member 'ABP_GlobalGI_LaunchScene_C::S__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, RuntimeTimeEnable) == 0x00216D, "Member 'ABP_GlobalGI_LaunchScene_C::RuntimeTimeEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightTickSecond) == 0x002170, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightTickSecond' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightTickCounter) == 0x002174, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightTickCounter' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ForceUpdateMainLightDir) == 0x002178, "Member 'ABP_GlobalGI_LaunchScene_C::ForceUpdateMainLightDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, WindDir) == 0x00217C, "Member 'ABP_GlobalGI_LaunchScene_C::WindDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, __4__H) == 0x002180, "Member 'ABP_GlobalGI_LaunchScene_C::__4__H' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, __yH) == 0x002181, "Member 'ABP_GlobalGI_LaunchScene_C::__yH' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TempFogMaterial) == 0x002188, "Member 'ABP_GlobalGI_LaunchScene_C::TempFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TempFogDMI) == 0x002190, "Member 'ABP_GlobalGI_LaunchScene_C::TempFogDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyboxDMI) == 0x002198, "Member 'ABP_GlobalGI_LaunchScene_C::SkyboxDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyboxMaterial) == 0x0021A0, "Member 'ABP_GlobalGI_LaunchScene_C::SkyboxMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunDiscColor) == 0x0021A8, "Member 'ABP_GlobalGI_LaunchScene_C::SunDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunScatterColor) == 0x0021B8, "Member 'ABP_GlobalGI_LaunchScene_C::SunScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunSize) == 0x0021C8, "Member 'ABP_GlobalGI_LaunchScene_C::SunSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonDiscColor) == 0x0021CC, "Member 'ABP_GlobalGI_LaunchScene_C::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonScatterColor) == 0x0021DC, "Member 'ABP_GlobalGI_LaunchScene_C::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonSize) == 0x0021EC, "Member 'ABP_GlobalGI_LaunchScene_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HorizonColor) == 0x0021F0, "Member 'ABP_GlobalGI_LaunchScene_C::HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HorizonFalloff) == 0x002200, "Member 'ABP_GlobalGI_LaunchScene_C::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ZenithColor) == 0x002204, "Member 'ABP_GlobalGI_LaunchScene_C::ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ExtremWeatherWeight) == 0x002214, "Member 'ABP_GlobalGI_LaunchScene_C::ExtremWeatherWeight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_TopColor) == 0x002218, "Member 'ABP_GlobalGI_LaunchScene_C::ST_TopColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_DomeColorTint) == 0x002228, "Member 'ABP_GlobalGI_LaunchScene_C::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_TopWidth) == 0x002238, "Member 'ABP_GlobalGI_LaunchScene_C::ST_TopWidth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharMainLightCurve) == 0x002240, "Member 'ABP_GlobalGI_LaunchScene_C::CharMainLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharSkyLightCurve) == 0x002248, "Member 'ABP_GlobalGI_LaunchScene_C::CharSkyLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UseCharCustomLighting) == 0x002250, "Member 'ABP_GlobalGI_LaunchScene_C::UseCharCustomLighting' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharAmbientColor) == 0x002254, "Member 'ABP_GlobalGI_LaunchScene_C::CharAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharSkinAmbientColor) == 0x002264, "Member 'ABP_GlobalGI_LaunchScene_C::CharSkinAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharShadowCurve) == 0x002278, "Member 'ABP_GlobalGI_LaunchScene_C::CharShadowCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionMaterial) == 0x002280, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionIntensity) == 0x002288, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionDMI) == 0x002290, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ___y_0h) == 0x002298, "Member 'ABP_GlobalGI_LaunchScene_C::___y_0h' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LensFlareMI) == 0x0022A0, "Member 'ABP_GlobalGI_LaunchScene_C::LensFlareMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LensFlareDMI) == 0x0022A8, "Member 'ABP_GlobalGI_LaunchScene_C::LensFlareDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Nadir_Color) == 0x0022B0, "Member 'ABP_GlobalGI_LaunchScene_C::Nadir_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Nadir_Falloff) == 0x0022C0, "Member 'ABP_GlobalGI_LaunchScene_C::Nadir_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Sun_Scatter_Size) == 0x0022C4, "Member 'ABP_GlobalGI_LaunchScene_C::Sun_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Moon_Scatter_Size) == 0x0022C8, "Member 'ABP_GlobalGI_LaunchScene_C::Moon_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainDirectionLightUpdateThreshold_Mobile) == 0x0022CC, "Member 'ABP_GlobalGI_LaunchScene_C::MainDirectionLightUpdateThreshold_Mobile' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainDirectionLightUpdateThreshold) == 0x0022D0, "Member 'ABP_GlobalGI_LaunchScene_C::MainDirectionLightUpdateThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalWindDirection) == 0x0022D4, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalWindRightDirection) == 0x0022E0, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalWindRightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG___y_0h__) == 0x0022EC, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG___y_0h__' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Character_Rim_Color) == 0x0022F0, "Member 'ABP_GlobalGI_LaunchScene_C::Character_Rim_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, RealTimeOfDay) == 0x002300, "Member 'ABP_GlobalGI_LaunchScene_C::RealTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunRotation) == 0x002304, "Member 'ABP_GlobalGI_LaunchScene_C::SunRotation' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG__r____I____) == 0x002310, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG__r____I____' has a wrong offset!");

}

